@page "/weather"
@using MudBlazorApp.Client.Components
@inject IDialogService DialogService


<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Typo="Typo.body1" Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0" AllowUnsorted="false"
    @bind-SelectedItem="selectedItem">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context?.Date</MudTd>
            <MudTd DataLabel="Temp. (C)">@context?.TemperatureC</MudTd>
            <MudTd DataLabel="Temp. (F)">@context?.TemperatureF</MudTd>
            <MudTd DataLabel="Summary">@context?.Summary</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
    <MudSpacer />
    <MudText Class="align-self-center d-inline">Selected: @selectedItem?.Summary</MudText>
    <MudSpacer />

    <MudButton Variant="Variant.Filled" Color="Color.Primary"
               @onclick="CreateNewModalAsync">Create New</MudButton>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-2"
               @onclick="EditSelectedModalAsync">Get List Selection</MudButton>
}

@code {
    // Данные таблицы с указанием температоры (заполяем случайными данными)
    private List<WeatherForecast> forecasts = new();

    // Через привязку создаём ссылку на текущий выбранных элемент таблицы
    private WeatherForecast? selectedItem = null;

    private async Task CreateNewModalAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        // Устанавливаем значения полей диалога
        var parameters = new DialogParameters
        {
            ["Field1Value"] = "50",
            ["Field2Value"] = "Тепло"
        };

        // Отображаем диалог
        var dialog = await DialogService.ShowAsync<WeatherInfo>("Simple Dialog", parameters, options);
        var result = await dialog.Result;

        // В случае, если пользователь подтвердил введённые значения, сохраняем их
        if (!result.Canceled && result.Data is DialogResultModel data)
        {
            if (!Int32.TryParse(data.Field1, out var tempearature))
            {
                return;
            }

            // Добавляем новый элемент в таблицу
            forecasts.Add(new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now),
                TemperatureC = tempearature,
                Summary = data.Field2
            });

            // Выполняем Re-rendering экрана
            StateHasChanged();
        }
    }

    private async Task EditSelectedModalAsync()
    {
        // Модальный диалог показываем только в том случае, если была выбрана
        // строка таблицы
        if (selectedItem != null)
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };

            // Устанавливаем значения полей диалога
            var parameters = new DialogParameters
                {
                    ["Field1Value"] = selectedItem.TemperatureC.ToString(),
                    ["Field2Value"] = selectedItem.Summary
                };

            // Отображаем диалог
            var dialog = await DialogService.ShowAsync<WeatherInfo>("Simple Dialog", parameters, options);
            var result = await dialog.Result;

            // В случае, если пользователь подтвердил введённые значения, сохраняем их
            if (!result.Canceled && result.Data is DialogResultModel data)
            {
                // Сохраняем данные в таблице через ссылку на элемент (selectedItem)
                if( Int32.TryParse(data.Field1, out var value))
                {
                    selectedItem.TemperatureC = value;
                }

                selectedItem.Summary = data.Field2;

                // Выполняем Re-rendering экрана
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Имитируем асинхронную загрузку, чтобы продемонстрировать индикатор загрузки.
        // В промышленном решении мы будет загружать данные с сервера через API
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToList();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
